// Generated by Selenium IDE
using System;
using System.Diagnostics;
using System.IO;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.IE;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using SeleniumExtras.WaitHelpers;
using WebDriverManager;
using WebDriverManager.DriverConfigs.Impl;
using Xunit;
using Xunit.Abstractions;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Text;
using OpenQA.Selenium.Edge;
using System.Collections;
using Microsoft.VisualStudio.TestPlatform.TestHost;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;
using OpenQA.Selenium.Internal;
using System.Diagnostics.Metrics;
using AngleSharp;
using System.Reflection;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Xunit.Sdk;

namespace Selenium.NetCore.Test
{
    public class ChromeTests : IDisposable
    {      
        public static IWebDriver webDriver;
        private readonly ITestOutputHelper output;

        public List<workitem> workitem_list = new List<workitem>();
        bool WI4isMoreThan13;

        public ChromeTests(ITestOutputHelper output)
        {
            this.output = output;
            var directory = Directory.GetCurrentDirectory();
           
            var pathDrivers = "C:/Program Files/chromedriver - win64";

            ChromeOptions options = new ChromeOptions();
            options.AddExcludedArgument("enable-automation");
            options.AddArgument("disable-infobars");
            options.AddUserProfilePreference("credentials_enable_service", false);
            options.AddUserProfilePreference("profile.password_manager_enabled", false);

            new DriverManager().SetUpDriver(new ChromeConfig()); //
            
            webDriver = new ChromeDriver(options);

            Debug.Print("dirGG" + directory);
        }

        class MultiComparable : IComparable
        {
            private int Value { get; }

            public MultiComparable(int value)
            {
                Value = value;
            }

            public int CompareTo(object obj)
            {
                if (obj is int intObj)
                {
                    return Value.CompareTo(intObj);
                }
                else if (obj is MultiComparable multiObj)
                {
                    return Value.CompareTo(multiObj.Value);
                }

                throw new InvalidOperationException();
            }
        }

        

        [Fact]
        public void ACME_0_1_Navigate_to_Main_Site()
        {
            string filter_parameter = "WI4";

            navigate_to_Main_Site();
            login();
            navigate_to_Subpage();
            scrape_data();
            filter_on_WI4_type_datarows_and__logging_them(filter_parameter);
            verify_WI4_type_workitem_count(filter_parameter);
            logout();

            Xunit.Assert.True(WI4isMoreThan13);
        }

        internal void navigate_to_Main_Site() {

            webDriver.Navigate().GoToUrl("https://acme-test.uipath.com/");
            webDriver.Manage().Window.Maximize();
        }

        internal void login()
        {
            webDriver.FindElement(By.LinkText("Log In")).Click();
            webDriver.FindElement(By.Id("email")).SendKeys("ggswtesting@gmail.com");
            webDriver.FindElement(By.Id("password")).SendKeys("V4JqZPRVEzUJ_#h");
            webDriver.FindElement(By.Id("remember")).Click();
            webDriver.FindElement(By.CssSelector(".btn-primary")).Click();
        }

        internal void navigate_to_Subpage()
        {
            webDriver.FindElement(By.CssSelector(".dropdown:nth-child(2) .btn")).Click();
        }

        internal void scrape_data()
        {                       
            string[,] tablerows = new string[110, 5];

            int a = 1;

            //pages
            for (int i = 2; i < 11; i++)
            {
                //rows
                for (int j = 0; j < 10; j++)
                {
                    for (int k = 0; k < 5; k++)
                    {
                        try
                        {
                            tablerows[a-1, k] = webDriver.FindElement(By.XPath("/html/body/div/div[2]/div/table/tbody/tr[" + (j + 2) + "]/td[" + (k + 2) + "]")).Text;
                            
                        }
                        catch (NoSuchElementException)
                        {
                            a--;
                            continue;
                        }   
                    }
                    a++;
                }
                try
                {
                    webDriver.FindElement(By.LinkText(Convert.ToString(i))).Click();
                }
                catch (NoSuchElementException)
                {
                    continue;
                }
            }

            //string array to class instantiation
            for (int l = 0; l < tablerows.GetLength(0); l++)
            {
                int m;
                for (m = 0; m < 5; m++)
                {
                    int WIID = Convert.ToInt32(tablerows[l, m]);
                    m++;
                    string Description = tablerows[l, m];
                    m++;
                    string WI_Type = tablerows[l, m];
                    m++;
                    string Status = tablerows[l, m];
                    m++;
                    string Date = tablerows[l, m];
                    workitem_list.Add(new workitem(WIID, Description, WI_Type, Status, Date));
                }
                m = 0; 
            }
        }

        internal void filter_on_WI4_type_datarows_and__logging_them(string filter_parameter)
        {
            TextWriter tw = new StreamWriter(string.Concat("C:/Users/gluck/source/repos/Trialwork_ACME/Acme_log_filtered_on" + filter_parameter + ".csv"), append: true);

            foreach (var workitem in workitem_list)
            {
                if (workitem.WI_Type == filter_parameter)
                {
                    // write lines of text to the file
                    tw.WriteLine(string.Concat(Convert.ToString(workitem.WIID),";",workitem.Description, ";", workitem.WI_Type, ";", workitem.Status, ";", workitem.Date));
                }
            }
            tw.Close();
        }


        internal bool verify_WI4_type_workitem_count(string filter_parameter)
        {
            int filtered_counter = 0;

            foreach (var workitem in workitem_list)
            {
                if (workitem.WI_Type == filter_parameter)
                {
                    filtered_counter++;
                }
            }
            Console.WriteLine("Filtered total: " + filtered_counter);

            if (filtered_counter > 13)
            {
                WI4isMoreThan13 = true;        
            }
            else
            {
                WI4isMoreThan13 = false;    
            }
            return WI4isMoreThan13;
        }


        internal void logout()
        {
            webDriver.FindElement(By.LinkText("Log Out")).Click();
        }

        public void Dispose()
        {
            webDriver.Dispose();
        }
    }
}

